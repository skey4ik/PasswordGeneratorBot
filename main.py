import settings
import keyboard
import random
import string

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text

storage = MemoryStorage()
bot = Bot(settings.token)
dp = Dispatcher(bot, storage=storage)

async def on_startup(_):
    print('–°–ø–∞—Å–∏–±–æ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–æ–µ–≥–æ –±–æ—Ç–∞!')

class UserState(StatesGroup):
    letters_storage = State()
    digits_storage = State()
    punctuation_storage = State()
    length = State()
    letters_generate = State()
    digits_generate = State()
    pincuation_generate = State()

def generate_password(length):
    characters = string.ascii_letters + string.digits
    password = ''.join(random.choice(characters) for i in range(length))
    return password

@dp.message_handler(commands=['start'])
@dp.message_handler(Text(equals="‚Ü©–ù–∞–∑–∞–¥"), state='*')
async def start_command(message: types.message, state: FSMContext):
    await state.finish()
    await message.answer('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å üëá', reply_markup = keyboard.kb_main)

@dp.message_handler(Text(equals="üîì–õ–µ–≥–∫–∏–π –ø–∞—Ä–æ–ª—å (5)"))
async def easy(message: types.message):
    await message.answer(generate_password(5))

@dp.message_handler(Text(equals="üîí–°—Ä–µ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å (10)"))
async def medium(message: types.message):
    await message.answer(generate_password(10))

@dp.message_handler(Text(equals="üîê–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (15)"))
async def hard(message: types.message):
    await message.answer(generate_password(15))

@dp.message_handler(Text(equals="üõ†–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"), state='*')
async def hard(message: types.message, state: FSMContext):
    async with state.proxy() as data:
        data['letters_storage'] = "‚ùå–ë—É–∫–≤—ã"
        data['digits_storage'] = "‚ùå–¶–∏—Ñ—Ä—ã"
        data['punctuation_storage'] = "‚ùå–°–∏–º–≤–æ–ª—ã"
        data['letters_generate'] = ""
        data['digits_generate'] = ""
        data['punctuation_generate'] = ""
    await UserState.length.set()
    await message.answer('üîΩ–ù–∞—Å—Ç—Ä–æ–π —Å–∞–ºüîΩ', reply_markup = keyboard.kb_custom)
    await message.answer(f"–í–≤–µ–¥–∏ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è:\n{data['letters_storage']} {data['digits_storage']} {data['punctuation_storage']}", reply_markup = keyboard.ikb_custom)

@dp.callback_query_handler(state='*')
async def update_button(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data = data
    if call.data == 'letters':
        if data['letters_storage'] != "‚úÖ–ë—É–∫–≤—ã" and data['letters_generate'] != string.ascii_letters:

            async with state.proxy() as data:
                data['letters_storage'] = "‚úÖ–ë—É–∫–≤—ã"
            
            async with state.proxy() as data:
                data['letters_generate'] = string.ascii_letters
        else:
            async with state.proxy() as data:
                data['letters_storage'] = "‚ùå–ë—É–∫–≤—ã"
            async with state.proxy() as data:
                data['letters_generate'] = ""

        await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è:\n{data['letters_storage']} {data['digits_storage']} {data['punctuation_storage']}", reply_markup=keyboard.ikb_custom)
    
    if call.data == 'digits':
        if data['digits_storage'] != "‚úÖ–¶–∏—Ñ—Ä—ã" and data['digits_generate'] != string.digits:

            async with state.proxy() as data:
                data['digits_storage'] = "‚úÖ–¶–∏—Ñ—Ä—ã"

            async with state.proxy() as data:
                data['digits_generate'] = string.digits
        else:
            async with state.proxy() as data:
                data['digits_storage'] = "‚ùå–¶–∏—Ñ—Ä—ã"
            async with state.proxy() as data:
                data['digits_generate'] = ""

        await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è:\n{data['letters_storage']} {data['digits_storage']} {data['punctuation_storage']}", reply_markup=keyboard.ikb_custom)
    
    if call.data == 'punctuation':
            if data['punctuation_storage'] != "‚úÖ–°–∏–º–≤–æ–ª—ã" and data['punctuation_generate'] != string.punctuation:
            
                async with state.proxy() as data:
                    data['punctuation_storage'] = "‚úÖ–°–∏–º–≤–æ–ª—ã"

                async with state.proxy() as data:
                    data['punctuation_generate'] = string.punctuation
            else:
                async with state.proxy() as data:
                    data['punctuation_storage'] = "‚ùå–°–∏–º–≤–æ–ª—ã"
                async with state.proxy() as data:
                    data['punctuation_generate'] = ""

            await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è:\n{data['letters_storage']} {data['digits_storage']} {data['punctuation_storage']}", reply_markup=keyboard.ikb_custom)

@dp.message_handler(state=UserState.length)
async def length(message: types.message, state: FSMContext):
    if message.text.isdigit() and 0 < int(message.text) < 4097:
        async with state.proxy() as data:
            data['length'] = int(message.text)
        
        def generate_password_custom(length):
            characters = data['letters_generate'] + data['digits_generate'] + data['punctuation_generate']
            password = ''.join(random.choice(characters) for i in range(length))
            return password
        
        await message.answer(generate_password_custom(data['length']))
    else:
        await message.answer('‚ùå–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4096')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)